# Intro

*Android* to system napisany w Javie z kernelem z Linuxa, każdy program jest
uzytkownikiem i ma prawa do pewnych grup np. video oraz kernel ma rozbudowaną
komunikację między programami.

*Stock* to system fabrycznie przygotowany i sprzedawany z telefonem (a także
kolejne updaty tego systemu).

*Root* to modyfikacja systemu Android "usuwająca" hasło z roota i pozwalająca na
korzystanie z jego uprawnień aplikacjom czyszczącym cache, poprawiającym
wydajność lub monitorującym działanie kernela Linuxa.

*AOSP, Lineage* i liczne mutacje typu *ResurrectionRemix, cDroid* to systemy
powstałe w oparciu o źródła zmodyfikowanego kernela ze stocka oraz najnowszy
system google dostosowany do urządzeń przez grupy programistów typu *Lineage*, a
potem zwykłych uzytkowników z forum np. xda.


# Kompilacja Androida **Oreo** *ResurrectionRemix*
##### https://github.com/ResurrectionRemix/platform_manifest/tree/oreo
##### https://github.com/G3-Development/local_manifests

### Inicjuje archiwum Androida Oreo 
#### Wymagane około **140GB** na pełne archiwum bez opcji --depth=1 
#### (126GB zajęła jedna kompilacja bez ccache, które zabiera dodatkowe 140GB)
```
ln -sfn /opt/android-sdk/platform-tools/adb /usr/local/bin/adb
curl http://commondatastorage.googleapis.com/git-repo-downloads/repo > /usr/local/bin/repo
chmod 755 /usr/local/bin/repo
mkdir RR && cd RR
repo init -u https://github.com/ResurrectionRemix/platform_manifest.git -b oreo --depth=1
```
### Dodaję odpowiednie części firmowe binarne Androida systemu przez np. recovery
#### np. modem z wersji 21C działa z wszystkimi nie stockowymi systemami
##### https://forum.xda-developers.com/lg-g3/general/radio-modem-lg-g3-t3110376

### Tworzę local_manifests z dopracowanymi sterownikami konkretnego modelu komórki
```
# https://github.com/TheMuppets/proprietary_vendor_lge/tree/lineage-15.1/d855
# add file RR/.repo/local_manifests/roomservice.xml
<?xml version="1.0" encoding="UTF-8"?>
<manifest>
  <project name="lineageOS/android_device_lge_d855" path="device/lge/d855" remote="github" revision="lineage-15.1" />
  <project name="lineageOS/android_device_lge_g3-common" path="device/lge/g3-common" remote="github" revision="lineage-15.1" />
  <project name="lineageOS/android_kernel_lge_g3" path="kernel/lge/g3" remote="github" revision="lineage-15.1" />
  <project name="lineageOS/android_device_qcom_common" path="device/qcom/common" remote="github" />
  <project name="LineageOS/android_packages_resources_devicesettings" path="packages/resources/devicesettings"/>
  <project name="TheMuppets/proprietary_vendor_lge" path="proprietary/vendor/lge" remote="github" revision="lineage-15.1" />
</manifest>
# lub
# dodaj linki z https://github.com/ResurrectionRemix-Devices
<?xml version="1.0" encoding="UTF-8"?>
<manifest>
  <project name="ResurrectionRemix-Devices/device_lge_d855" path="device/lge/d855" remote="github" revision="oreo" />
  <project name="ResurrectionRemix-Devices/android_device_lge_g3-common" path="device/lge/g3-common" remote="github" revision="8.1" />
  <project name="pwasiewi/kernel_g3" path="kernel/lge/g3" remote="github" revision="los-15.1" />
  <project name="lineageOS/android_device_qcom_common" path="device/qcom/common" remote="github" />
  <project name="LineageOS/android_packages_resources_devicesettings" path="packages/resources/devicesettings" />
  <project name="ResurrectionRemix-Devices/proprietary_vendor_lge" path="vendor/lge" remote="github" revision="8.1" />
</manifest>
# lub z https://github.com/LiquidRemix-Devices
# lub pobierz gotowy plik local_manifests
# https://github.com/G3-Development/local_manifests
curl --create-dirs -L -o .repo/local_manifests/g3.xml -O -L https://raw.githubusercontent.com/G3-Development/local_manifests/8.1/g3.xml
```

### Ściągam wskazane w local_manifests dodatkowe sterowniki wraz z całym kodem Androida
```
repo sync  -f --force-sync --no-clone-bundle -j$(nproc --all)
#wersja bez tagów: repo sync  -f --force-sync --no-clone-bundle --no-tags -j$(nproc --all)
```

#### Sprawdzam, czy trzeba zmnienić lineage.mk, jeśli kompiluje RR, a mam sterowniki z Lineage
```
# mv ./device/lge/d855/lineage.mk ./device/lge/d855/rr.mk
# sed -i 's/lineage/rr/g' ./device/lge/d855/rr.mk
```

#### Python musi być w wersji 2.7
```
# sed -i 's/\#!\/usr\/bin\/env python/\#!\/usr\/bin\/env python2.7/g' $i
eselect python set 2 # select python 2.7
```

#### Ustawiam najprostsze LC_ALL 
export LC_ALL=C

#### Generuje OTA z nazwą romu i archiwami, gdzie wrzuca się kopie skompilowanego systemu
##### https://github.com/ResurrectionRemix/packages_apps_ResurrectionOTA

#### Podmieniam gcc na UBER gcc (można podmienić na inny lub nowszy własny skompilowany UBER toolchain zmieniając konfig w *build/envsetup.sh*)
```
git clone https://bitbucket.org/UBERTC/arm-linux-androideabi-4.9.git prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-UB-4.9
git clone https://bitbucket.org/UBERTC/arm-eabi-4.9.git prebuilts/gcc/linux-x86/arm/arm-linux-eabi-UB-4.9
#lub kompilujemy własny UBER toolchain
mkdir UBERTC && cd UBERTC
repo init -u https://github.com/UBERTC/uber-manifest.git -b master
repo sync
cd scripts
#wybieramy z kilku wersji np.
./arm-linux-androideabi-4.9
./arm-eabi-4.9
#skompilowany toolchain z katalogu UBERTC/out kopiujemy do prebuilts/gcc/linux-x86/arm/ usuwając poprzednie wersje 
#w pliku: build/envsetup.sh
#podmieniamy linię z wyrażeniem "toolchaindir=arm" np. na:
        arm) toolchaindir=arm/arm-linux-androideabi-4.9/bin
#lub
        arm) toolchaindir=arm/arm-linux-androideabi-UB-4.9/bin
#lub
        arm) toolchaindir=arm/arm-linaro-7.2/bin
```
#### Pobieram CLANG w nowszej wersji i podobnie zmieniamy konfig w *build/envsetup.sh*
```
git clone https://github.com/USA-RedDragon/prebuilts_clang_host_linux-x86_7.0-DragonTC prebuilts/clang/host/linux-x86/clang7.0-DragonTC --depth=1
#podmieniamy linię z wyrażeniem "local CLANG_VERSION" np. na:
        local CLANG_VERSION=clang7.0-DragonTC
```

### Kompiluję wybraną wersję Androida RR
```
. build/envsetup.sh && brunch d855
cd ./out/target/product/<devicename>/
```

### W razie porażki usuwam kompilację i robię sync od nowa, jeśli usunąłem katalogi z poprzednimi dodatkowymi sterownikami, czy kernelem z local_manifests
```
make clean
repo sync -f --force-sync --no-clone-bundle -j$(nproc --all)
#wersja bez tagów: repo sync  -f --force-sync --no-clone-bundle --no-tags -j$(nproc --all)
. build/envsetup.sh
lunch rr_d855-userdebug && time make bacon -j16
```

# Inne odnośniki
 - https://github.com/nathanchance/gcc-prebuilts/
 - https://www.lineageosrom.com/2017/01/how-to-build-lineageos-rom-for-any.html
 - https://forum.xda-developers.com/chef-central/android/how-to-build-lineageos-14-1-t3551484
